---
title: Non-Markovian epidemic simulation on bipartite networks
authors:
  - name: David Wu
    affiliation: Department of Econometrics and Business Statistics, Monash University
    roles: writing
    corresponding: true
  - name: Frankie Patten-Elliott
    affiliation: School of Mathematical Sciences, University of Nottingham
  - name: Oliver J. Maclaren
    affiliation: Department of Engineering Science, University of Auckland
draft: true
bibliography: references.bib
notebook-links: false
date: last-modified
---

## Meta Notes

- should write a separate version of the library code

## Introduction

### Notes from initial meeting {.tohide}

- We want to implement a simple toy model
  - we want demography, e.g. age, for individuals
  - we want to have some categorisation for the context ndoes (bipartite nature is probably important)
  - we need a process with non-markovian waiting time
  - want a competing process

### Why this is unique/interesting {.tohide}

- The simulation of epidemics has been instrumental in defining policy at various levels, from healthcare unit to government. 
- Much success can be had with models that approximate individual behaviours using approaches like mass-action.
- However, the individual interaction can be important in periods where the assumptions of the approximations cannot hold.
- To structure the interactions between individuals, there are many approaches [missing info], but a standard model is to use a network, or graph, to define the possible interactions between individuals.
- To realistically represent modes of interaction in a memory-efficient manner, we choose to use bipartite networks, where, as usual, individuals are represented as nodes, in one of the disjoint sets; and the contexts of interaction are now also explicitly nodes, and are the other disjoint set; i.e. individuals are connected to other individuals through interaction context nodes. 

- Kit Yates paper on what cant be done with gillespie

### Problem Setup/Motivation {.tohide}

- The formation of this method was done to do simulation of government policies to control COVID-19 in New Zealand over 2020-2022.
- That model worked with a large, multi-layered, bipartite network that was derived from multiple sources of government-level data.
- Different data sources informed different layers of the bipartite network, that represent different contexts of infection
- This bipartite network is large, with over X million nodes, and created with [data sources]
- We wanted to construct relatively complex agent-like logic, without explicitly looping over each agent, especially when they are not important to the infectious disease process.


- Here we will present on a simple model with some important mechanisms included.

## Method

### Aspects to highlight

### Motivation for grouping and structuring a reaction tree {.tohide}

When the reactions are enumerated, many reactions are 

### Non-Markovian Extensions

To build in more complex interactions, 

### Algorithm and principles

We write an algorithm in pseudocode in @alg-gillespiemax.

```pseudocode
#| label: alg-gillespiemax

\begin{algorithm}
  \caption{Gillespie Max}
  \begin{spacing}{0.85}
  \begin{algorithmic}
    \Procedure{Gillespie Max}{$\mathcal{I}, V, x_0, \hat{\lambda}, \lambda$}
      \State Initialise time $t \gets 0$
      \State Initialise state $x \gets x_0$
      \State Initialise history $S$ with state $x$
      \ForAll{$i$ in $\mathcal{I}$}
        \State $\Lambda_i \gets \hat\lambda(i, x)$
      \EndFor
      \State $H_0 \gets \sum_{i \in \mathcal{I}} \Lambda_i$
      \State Initialise next event queue $Q$
      \While{$H_0 > 0$ \textbf{or} $Q$ not empty}
        \If{$H_0 > 0$}
          \State Draw $\tau \sim$ Exp$(H_0)$
        \Else
          \State $\tau \gets \infty$
        \EndIf
        \If{$Q$ not empty \textbf{and} $Q[0].t < (t + \tau)$}
          \State Set next event $v \gets Q[0]$
          \State Set time $t \gets Q[0].t$
        \Else
          \State Set time $t \gets t + \tau$
          \State Draw a potential event $V_i$ from $V$, weighted by $\frac{\Lambda_i}{H_0}$
          \State Draw $a \sim U(0, 1)$
          \If{$a < \lambda(i, S) / \Lambda_i$}
            \State Set event to fire $v \gets V_i$
          \Else
            \State Set event to fire $v \gets \emptyset$  \Comment{shadow event}
          \EndIf
        \EndIf

        \If{$t > t_{max}$}
          \State \textbf{return}
        \EndIf

        \If{$v$ is not $\emptyset$}
          \State Update $x$ by $v$
          \State Record $x$ in $S$
          \State Update $Q$ with any new events to schedule
          \State Determine events $G \subset \mathcal{I}$ that are affected by $v$
          \State Recompute $\Lambda_i \gets \hat\lambda(i, x) \forall i \in G$ 
          \State Recompute $H_0 = \sum_{i \in \mathcal{I}} \Lambda_i$
        \EndIf
      \EndWhile
    \EndProcedure
  \end{algorithmic}
  \end{spacing}
\end{algorithm}
```

## Results

Here, we show 

We diagram in @fig-one


:::{#fig-abc}

```{.tikz}
\tikzstyle{int}=[draw, fill=blue!20, minimum size=2em]
\tikzstyle{init} = [pin edge={to-,thin,black}]

\begin{tikzpicture}[node distance=2.5cm,auto,>=latex']
  \node [int, pin={[init]above:$v_0$}] (a) {$\frac{1}{s}$};
  \node (b) [left of=a,node distance=2cm, coordinate] {a};
  \node [int, pin={[init]above:$p_0$}] at (0,0) (c)
    [right of=a] {$\frac{1}{s}$};
  \node [coordinate] (end) [right of=c, node distance=2cm]{};
  \path[->] (b) edge node {$a$} (a);
  \path[->] (a) edge node {$v$} (c);
  \draw[->] (c) edge node {$p$} (end) ;
\end{tikzpicture}
```

Das ist caption.
:::


```{python}
#| echo: false

from networkcontagion.lib import simulation
```

```{python plot}
#| label: fig-one
from matplotlib import pyplot as plt

plt.plot([1, 2, 4], [3, 6, 5])
```

## Discussion




##
This is a simple placeholder for the manuscript's main document [@knuth84].
