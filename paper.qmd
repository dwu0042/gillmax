---
title: Non-Markovian epidemic simulation on bipartite networks
authors:
  - name: David Wu
    affiliation: Department of Econometrics and Business Statistics, Monash University
    roles: writing
    corresponding: true
  - name: Frankie Patten-Elliott
    affiliation: School of Mathematical Sciences, University of Nottingham
  - name: Oliver J. Maclaren
    affiliation: Department of Engineering Science, University of Auckland
draft: true
bibliography: references.bib
notebook-links: false
date: last-modified
execute:
  echo: false
---

```{python}
from importlib import reload
from IPython.utils.io import capture_output
as_silent = capture_output
```

## Meta Notes

- ~~should write a separate version of the library code~~ This is now done: gillespymax

## Introduction

The simulation of stochastic process models is a computationally challenging task. However, these stochastic process models are often the most approachable method of defining behaviours of complex systems. This is particularly the case in modelling infectious diseases, as mean-field approximations tend to break down in real-world scenarios.

One framework that can be employed to reduce the computational burden of simulating complex systems is the continuous time Markov chain (CTMC). This is where the timing discrete jumps from one state to another are modelled as arising from a Poisson process. To simulate these types of models computationally, variants of the Gillespie method [@gillespie_exact_1977] are used. This can exactly simulate the dynamics that arise from this class of models.

The usage of CTMCs imposes a memorylessness constraint on the model, and can often incorrectly capture the temporal dynamics. 

## Methods

The problem occurs when a non-Markovian process is introduced, that is, a process that does not have an exponential waiting time between events.
There are two broad approaches to dealing with this problem:

1. Queue events using a next-reaction style method
2. Simulate events as if they were Markovian and correct the realisation by rejecting (thinning)

These two approaches have different computational and memory tradeoffs. With a next-reaction style method, where you pre-compute the firing time of the next event, you retain the runtime efficiency of the direct method (or often improve it); but the method requires more memory to store - since each process now need to retain more information than just a single rate.
For the rejection method, you retain the same memory efficiency, as you store the maximum rate of firing instead of the exact (Markovian) rate of firing, but you reduce the computational efficiency, as additional random numbers are being drawn for no change in state.
However, these two methods are complementary in their payoffs and drawbacks -- and thus we found a combined approach was an effective way of modelling these complex reactions.

To integrate a next-reaction style of event firing in the direct method, we can introduce an event queue. Implementation-wise, this is a priority queue, where elements of the queue are ordered by their time of firing.
When drawing the time to fire in the direct method step, we additionally check if the next queued event would fire before the proposed time-to-fire from the direct method. If the queued event would fire first, then we resolve that event, before repeating the check; if there are no queued events that would fire first, then we proceed with the direct method. This is noted in @unknown as a yet-to-be-published "first-family method".

To integrate thinning-based event firing, we simulate the direct method as usual, but before resolving the event, we determine whether the event is a real event or a null event. For a reaction with a hazard function $\lambda(t)$ which is bounded above by a constant $\hat{\lambda}$ over a time interval $[t_0, t_1]$, the probability of the event being real at any point in that time interval is $\lambda(t) / \hat\lambda$. 
This insight is not necessarily novel: it is explained and carefully treated in @grosmann_efficient_2020.

### Notes from initial meeting {.tohide}

- We want to implement a simple toy model
  - we want demography, e.g. age, for individuals
  - we want to have some categorisation for the context ndoes (bipartite nature is probably important)
  - we need a process with non-markovian waiting time
  - want a competing process

### Why this is unique/interesting {.tohide}

- The simulation of epidemics has been instrumental in defining policy at various levels, from healthcare unit to government. 
- Much success can be had with models that approximate individual behaviours using approaches like mass-action.
- However, the individual interaction can be important in periods where the assumptions of the approximations cannot hold.
- To structure the interactions between individuals, there are many approaches [missing info], but a standard model is to use a network, or graph, to define the possible interactions between individuals.
- To realistically represent modes of interaction in a memory-efficient manner, we choose to use bipartite networks, where, as usual, individuals are represented as nodes, in one of the disjoint sets; and the contexts of interaction are now also explicitly nodes, and are the other disjoint set; i.e. individuals are connected to other individuals through interaction context nodes. 

- Kit Yates paper on what cant be done with gillespie (**)

### Problem Setup/Motivation {.tohide}

- The formation of this method was done to do simulation of government policies to control COVID-19 in New Zealand over 2020-2022.
- That model worked with a large, multi-layered, bipartite network that was derived from multiple sources of government-level data.
- Different data sources informed different layers of the bipartite network, that represent different contexts of infection
- This bipartite network is large, with over X million nodes, and created with [data sources]
- We wanted to construct relatively complex agent-like logic, without explicitly looping over each agent, especially when they are not important to the infectious disease process.


- Here we will present on a simple model with some important mechanisms included.

## Method

### Aspects to highlight

As the complexity and size of the system increases, we find that there are a few operations that become expensive if naively dealt with.
These are:
- the sampling of the class of reaction to fire next, and
- the resolution of the event (change in state and subsequent update to the reaction firing rates)


### Motivation for grouping and structuring a reaction tree {.tohide}

When the reactions are enumerated, many reactions are 

### Non-Markovian Extensions

To build in more complex interactions, we drop the Markovian assumption used in the construction of the direct method.
Existing methods, such as the next-reaction method, can already do this, since they use a priority queue 




### Algorithm and principles

We write an algorithm in pseudocode in @alg-gillespiemax.

```pseudocode
#| label: alg-gillespiemax

\begin{algorithm}
  \caption{Gillespie Max}
  \begin{spacing}{1.0}
  \begin{algorithmic}
    \Procedure{Gillespie Max}{$\mathcal{I}, V, x_0, \hat{\lambda}, \lambda$}
      \State Initialise time $t \gets 0$
      \State Initialise state $x \gets x_0$
      \State Initialise history $S$ with state $x$
      \ForAll{$i$ in $\mathcal{I}$}
        \State $\Lambda_i \gets \hat\lambda(i, x)$
      \EndFor
      \State $H_0 \gets \sum_{i \in \mathcal{I}} \Lambda_i$
      \State Initialise next event queue $Q$
      \While{$H_0 > 0$ \textbf{or} $Q$ not empty}
        \If{$H_0 > 0$}
          \State Draw $\tau \sim$ Exp$(H_0)$
        \Else
          \State $\tau \gets \infty$
        \EndIf
        \If{$Q$ not empty \textbf{and} $Q[0].t < (t + \tau)$}
          \State Set next event $v \gets Q[0]$
          \State Set time $t \gets Q[0].t$
        \Else
          \State Set time $t \gets t + \tau$
          \State Draw a potential event $V_i$ from $V$, weighted by $\frac{\Lambda_i}{H_0}$
          \State Draw $a \sim U(0, 1)$
          \If{$a < \lambda(i, S) / \Lambda_i$}
            \State Set event to fire $v \gets V_i$
          \Else
            \State Set event to fire $v \gets \emptyset$  \Comment{shadow event}
          \EndIf
        \EndIf

        \If{$t > t_{max}$}
          \State \textbf{return}
        \EndIf

        \If{$v$ is not $\emptyset$}
          \State Update $x$ by $v$
          \State Record $x$ in $S$
          \State Update $Q$ with any new events to schedule
          \State Determine events $G \subset \mathcal{I}$ that are affected by $v$
          \State Recompute $\Lambda_i \gets \hat\lambda(i, x) \forall i \in G$ 
          \State Recompute $H_0 = \sum_{i \in \mathcal{I}} \Lambda_i$
        \EndIf
      \EndWhile
    \EndProcedure
  \vspace {0.15ex}
  \end{algorithmic}
  \end{spacing}
\end{algorithm}
```
Main Simulation Logic
1. Initialise the time, state, event queue, and history
2. For each reaction, compute the maximum rate, and store
3. LABEL: Main loop
4. Draw proposed time to next event based on sum of maximum rates of reactions
6. Check if the first queued event will fire before the proposed time to next event
7. If true, pop and handle the first queued event, and return to step 4; otherwise, proceed
8. Advance time by the proposed time to next event
9. Draw the type of reaction to fire
10. Check the acceptance function of the proposed reaction to fire
11. If accepted, handle the event.
12. Return to step 3.

Event handling logic
1. Update the state based on the reaction
2. Push the record of the state into history
3. Check if the reaction generates any queued events, and insert them into the event queue
4. Determine the reactions that have rates affected by the reaction that fired
5. For each of those reactions, recompute their maximum rates, and update in the store.

## Results

Here, we show 

We diagram in @fig-one


:::{#fig-abc}

```{.tikz}
\tikzstyle{int}=[draw, fill=blue!20, minimum size=2em]
\tikzstyle{init} = [pin edge={to-,thin,black}]

\begin{tikzpicture}[node distance=2.5cm,auto,>=latex']
  \node [int, pin={[init]above:$v_0$}] (a) {$\frac{1}{s}$};
  \node (b) [left of=a,node distance=2cm, coordinate] {a};
  \node [int, pin={[init]above:$p_0$}] at (0,0) (c)
    [right of=a] {$\frac{1}{s}$};
  \node [coordinate] (end) [right of=c, node distance=2cm]{};
  \path[->] (b) edge node {$a$} (a);
  \path[->] (a) edge node {$v$} (c);
  \draw[->] (c) edge node {$p$} (end) ;
\end{tikzpicture}
```

Das ist caption.
:::


```{python}
#| echo: false
#| label: fig-one
#| fig-cap: An example realisation

from gillespymax import analysis
reload(analysis)

# here we suppress output
with as_silent():
  import hvplot.polars
  hvplot.extension('matplotlib')

records = analysis.read_records("vignette/sample_results.h5")
df = next(iter(records.values()))

chart = analysis.plot_history(df, 'SEIRDTQ')

rendered = hvplot.render(chart, backend="matplotlib")

rendered
```

## Discussion




##
This is a simple placeholder for the manuscript's main document [@knuth84].
